---
description: Kirinuki-PlaylistプロジェクトのHono APIエラーハンドリング規約
globs: src/app/api/**/*.ts,src/db/middlewares/**/*.ts
---
# Hono APIエラーハンドリング規約

## エラーハンドリングの基本方針

- カスタムエラークラスを使用
- 集中的なエラーハンドリングミドルウェア
- 適切なHTTPステータスコードの返却
- 一貫したエラーレスポンス形式

## カスタムエラークラス

エラーの種類ごとに専用のクラスを定義し、エラー処理を一元化します。

```typescript
// src/db/utils/errors.ts
export class NotFoundError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "NotFoundError";
  }
}

export class ValidationError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "ValidationError";
  }
}

export class DatabaseError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "DatabaseError";
  }
}

export class UniqueConstraintError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "UniqueConstraintError";
  }
}
```

## エラーハンドリングミドルウェア

エラーを集中的に処理するミドルウェアを実装し、アプリケーション全体に適用します。

```typescript
// src/db/middlewares/error-handler.ts
export const errorHandler: MiddlewareHandler = async (c, next) => {
  try {
    await next();
  } catch (err: unknown) {
    if (!(err instanceof Error)) {
      return c.json(
        {
          success: false,
          error: "不明なエラー",
          message: "予期しないエラーが発生しました",
        },
        500,
      );
    }

    console.error(`[Error] ${err.message}`, err.stack);

    // カスタムエラーの処理
    if (err instanceof UniqueConstraintError) {
      return c.json(
        {
          success: false,
          error: "重複エラー",
          message: err.message,
        },
        409,
      );
    }

    if (err instanceof DatabaseError) {
      return c.json(
        {
          success: false,
          error: "データベースエラー",
          message: err.message,
        },
        500,
      );
    }

    if (err instanceof NotFoundError) {
      return c.json(
        {
          success: false,
          error: "リソースが見つかりません",
          message: err.message,
        },
        404,
      );
    }

    // Zodバリデーションエラーの処理
    if (err instanceof HTTPException && err.status === 400) {
      return c.json(
        {
          success: false,
          error: "バリデーションエラー",
          details: err.message,
        },
        400,
      );
    }

    // その他のエラー
    return c.json(
      {
        success: false,
        error: err.name === "ZodError" ? err : "サーバーエラー",
        message: "予期しないエラーが発生しました",
      },
      500,
    );
  }
};
```

## リポジトリ層でのエラーハンドリング

リポジトリ層では、適切なカスタムエラーをスローし、エラーの種類を明確にします。

```typescript
// src/repositories/video-repository.ts
async getVideoById(db: D1Database, id: string): Promise<Video> {
  const client = createDbClient(db);
  try {
    const video = await client.select().from(videos).where(eq(videos.id, id)).get();

    if (!video) {
      throw new NotFoundError(`ID: ${id} の動画が見つかりません`);
    }

    return video;
  } catch (error) {
    if (error instanceof NotFoundError) {
      throw error;
    }
    throw new DatabaseError(
      `動画の取得中にエラーが発生しました: ${error instanceof Error ? error.message : "不明なエラー"}`,
    );
  }
}
```

## エラーレスポンスの形式

一貫したエラーレスポンス形式を使用し、クライアントが適切に処理できるようにします。

```typescript
// エラーレスポンスの基本形式
{
  success: false,
  error: "エラーの種類",
  message: "エラーの詳細メッセージ"
}
```

## バリデーションエラーの処理

Zodを使用したバリデーションエラーを適切に処理します。

```typescript
// src/app/api/[...route]/videos.ts
videosRouter.post("/", zValidator("json", videoInsertSchema), async (c) => {
  // zValidatorミドルウェアがバリデーションエラーを処理
  const input = c.req.valid("json") as VideoInsert;
  const id = await videoRepository.createVideo(c.env.DB, input);
  return c.json({ success: true, id }, 201);
});
```

## テスト環境でのエラーハンドリング

テスト環境では、エラーの検証を適切に行うための手法を確立します。

```typescript
// テスト中のエラーレスポンスの処理
const res = await app.fetch(
  new Request(`http://localhost/api/videos/${nonExistentId}`),
  env
);

// ステータスコードの検証
expect(res.status).toBe(404);

// レスポンス内容の検証
const responseData = await res.json() as { success: boolean; error: string };
expect(responseData.success).toBe(false);
expect(responseData.error).toBe("リソースが見つかりません");
```

### テスト実装時のポイント

1. **正確なエラー状態の再現**: テストではエラーが発生する状況を正確に再現する
2. **エラーレスポンスの検証**: ステータスコードと応答内容の両方を検証する
3. **型安全な検証**: レスポンスデータの型を明示して安全に検証する
4. **エラーメッセージの検証**: エラーメッセージが期待通りであることを確認する
5. **境界値テスト**: エラーの境界条件を適切にテストする
