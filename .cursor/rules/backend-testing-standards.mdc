---
description: Kirinuki-Playlistプロジェクトのバックエンドテスト規約
globs: apps/backend/**/__tests__/**/*.ts
---
# バックエンドテスト規約

## テスト基本方針

- ユニットテスト
- 統合テスト
- モックの適切な使用
- テストカバレッジの確保

```typescript
// services/__tests__/videos.test.ts
describe('videoService', () => {
  it('should get video by id', async () => {
    // テストコード
  });
});
```

## テストコードの構造化

- テストコードを適切に分割して保守性を向上させる
- 共通のセットアップ処理やテストデータを再利用可能な形で分離する
- エンドポイント別にテストをグループ化する

```
src/
├── __tests__/
│   ├── helpers/
│   │   ├── test-data.ts        # テストデータの定義
│   │   └── db-setup.ts         # DB初期化とシード処理
│   └── videos/
│       ├── index.test.ts       # 基本的なテスト
│       └── advanced.test.ts    # 高度なテストケース
```

```typescript
// __tests__/helpers/test-data.ts
import { nanoid } from "nanoid/non-secure";
import type { Video } from "../../models";

// テスト用のビデオデータ
export const videoList: Video[] = [
  {
    id: nanoid(),
    title: "Learning Hono",
    url: "https://www.youtube.com/watch?v=1234567890",
    start: 0,
    end: 100,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  // ...
];

// 新しいビデオデータを作成するヘルパー関数
export const createVideoData = (overrides: Partial<Video> = {}): Video => {
  return {
    id: nanoid(),
    title: "Test Video",
    url: "https://www.youtube.com/watch?v=test12345",
    start: 0,
    end: 60,
    createdAt: new Date(),
    updatedAt: new Date(),
    ...overrides,
  };
};
```

```typescript
// __tests__/videos/index.test.ts
describe("Videos API", () => {
  // 共通のセットアップ

  describe("GET /api/videos", () => {
    test("動画一覧を取得する", async () => {
      // テストコード
    });
  });

  describe("GET /api/videos/:id", () => {
    test("特定の動画を取得する", async () => {
      // テストコード
    });
  });
});
```

## テストの型安全性

- APIレスポンスに明示的な型定義を行う
- 型アサーションを適切に使用する
- コールバック関数のパラメータに型アノテーションを追加する
- JSONパースを行う場合は型安全に処理する

```typescript
// __tests__/helpers/db-setup.ts
// レスポンスデータの型定義
export type ApiResponse<T> = {
  success: boolean;
  [key: string]: unknown;
  data?: T;
};

// ビデオ一覧のレスポンス型
export type VideoListResponse = {
  success: boolean;
  videos: Video[];
};

// 単一ビデオのレスポンス型
export type VideoDetailResponse = {
  success: boolean;
  video: Video;
};

// ID返却のレスポンス型
export type IdResponse = {
  success: boolean;
  id: string;
};

// 成功レスポンス型
export type SuccessResponse = {
  success: boolean;
};
```

```typescript
// __tests__/videos/index.test.ts
test("動画一覧を取得する", async () => {
  const res = await app.fetch(new Request("http://localhost/api/videos"), env);
  expect(res.status).toBe(200);

  // 明示的な型アサーション
  const responseData = (await res.json()) as VideoListResponse;
  expect(responseData.success).toBe(true);

  const videos = responseData.videos;
  expect(videos.length).toBe(videoList.length);

  // コールバック関数のパラメータに型アノテーション
  videos.forEach((item: Video, index: number) => {
    expect(item.id).toBe(videoList[index].id);
    expect(item.title).toBe(videoList[index].title);
  });
});
```

### レスポンスの型安全な処理

テスト中のレスポンス処理では、以下のパターンに応じて適切な型安全性を確保します：

1. **正常系レスポンス**: 事前に定義した型を使用して型アサーションを行う

```typescript
const responseData = (await res.json()) as VideoListResponse;
expect(responseData.success).toBe(true);
expect(responseData.videos.length).toBe(3);
```

2. **エラーレスポンス**: インライン型定義または事前定義型を使用

```typescript
const responseData = (await res.json()) as { success: boolean; error?: string };
expect(responseData.success).toBe(false);
```

3. **不確実なレスポンス形式**: テキストとして取得してから安全に処理

```typescript
// レスポンスをテキストとして取得
const responseText = await res.text();
console.log("Response text:", responseText);

// JSONとして解析できる場合のみ検証
if (responseText.startsWith("{")) {
  const responseData = JSON.parse(responseText) as { success: boolean };
  expect(responseData.success).toBe(false);
}
```

### 型エラーの防止

- `res.json()`の戻り値は常に型アサーションを行う
- JSON.parseの結果も型アサーションを行う
- 不確実なレスポンスはテキストとして取得してから処理する
- 型定義ファイルを作成して共通の型を管理する

```typescript
// エラー例: 型アサーションなしでプロパティにアクセス
const responseData = await res.json(); // responseDataはunknown型
expect(responseData.success).toBe(false); // エラー: Object is of type 'unknown'

// 修正例: 型アサーションを追加
const responseData = (await res.json()) as { success: boolean };
expect(responseData.success).toBe(false); // OK
```

## Miniflare/D1テスト環境のセットアップ

- テスト用のセットアップファイルを作成
- 非同期のMiniflareバインディングを適切に処理
- テーブル定義とカラム名の一致を確認
- テスト終了時にリソースを適切に解放する

```typescript
// test-setup.ts
import { afterAll } from "@jest/globals";
import { Miniflare } from "miniflare";
import type { Bindings } from "./types";

// Miniflareインスタンスを作成
const mf = new Miniflare({
  modules: true,
  script: "",
  d1Databases: ["DB"],
  d1Persist: false, // インメモリデータベースを使用
});

// グローバル関数として定義
global.getMiniflareBindings = async (): Promise<Bindings> => {
  const env = await mf.getBindings();
  return env as Bindings;
};

// テスト終了時にMiniflareをクローズ（重要）
afterAll(async () => {
  await mf.dispose();
});
```

```typescript
// test-types.d.ts
import type { Bindings } from "./types";

declare global {
  function getMiniflareBindings(): Promise<Bindings>;
}
```

## テストデータの準備

- テスト前にテーブルを作成
- テストデータをシードする関数を実装
- SQLiteの列名に合わせてデータを挿入

```typescript
// __tests__/videos/index.test.ts
beforeAll(async () => {
  env = await getMiniflareBindings();

  // テーブルの作成を確認
  const client = createDbClient(env.DB);
  try {
    await client.run(`
      CREATE TABLE IF NOT EXISTS videos (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        url TEXT NOT NULL,
        start INTEGER NOT NULL,
        end INTEGER NOT NULL,
        created_at TEXT NOT NULL,
        updated_at TEXT NOT NULL
      )
    `);
  } catch (error) {
    console.error("テーブル作成エラー:", error);
  }
});

// テスト用のデータをシードする関数
const seed = async () => {
  const client = createDbClient(env.DB);

  try {
    // テスト前にテーブルをクリア
    await client.delete(videos);
    // D1データベースに挿入
    for (const video of videoList) {
      await client.run(`
        INSERT INTO videos (id, title, url, start, end, created_at, updated_at)
        VALUES ('${video.id}', '${video.title}', '${video.url}', ${video.start}, ${video.end},
        '${video.createdAt.toISOString()}', '${video.updatedAt.toISOString()}')
      `);
    }
  } catch (error) {
    console.error("シードエラー:", error);
  }
};
```

## リレーションシップを持つデータのテスト

### テストデータの設計

- リレーションシップを持つデータ（例：ビデオと著者）をテストする場合は、以下の点に注意する：
  - テスト用の型定義は実際のモデルを拡張し、関連エンティティの情報を含める
  ```typescript
  // テスト用のVideo型を定義（著者情報を含む）
  export type Video = VideoModel & {
    author: {
      id: string;
      name: string;
      iconUrl: string;
      bio: string | null;
    };
  };
  ```
  - シードデータは関連エンティティの順序を考慮して挿入する（親エンティティを先に挿入）
  ```typescript
  beforeEach(async () => {
    // 著者データを先にシードする
    await seedAuthors(env, authorList);
    // 次にビデオデータをシードする
    await seedVideos(env, videoList);
  });
  ```
  - 外部キー制約を持つテーブルの作成順序に注意する

### テストヘルパー関数

- テストデータ生成用のヘルパー関数を実装し、再利用性を高める
```typescript
export const createVideoData = (overrides: Partial<Video> = {}): Video => {
  const authorId = overrides.authorId || authorList[0].id;
  const author = authorList.find((a) => a.id === authorId) || authorList[0];

  return {
    id: nanoid(),
    title: "Test Video",
    // ...他のデフォルト値
    authorId: author.id,
    author: {
      id: author.id,
      name: author.name,
      iconUrl: author.iconUrl,
      bio: author.bio,
    },
    ...overrides,
  };
};
```

### リレーションシップのテストケース

- 関連エンティティの存在確認テストを実装する
  - 存在しない関連エンティティIDを指定した場合のエラー処理をテスト
  - 関連エンティティの更新が正しく反映されることをテスト
  - レスポンスに関連エンティティの情報が含まれていることを確認

```typescript
test("存在しない著者IDの場合エラーを返す", async () => {
  const invalidVideo = {
    title: "Invalid Author Video",
    url: "https://www.youtube.com/watch?v=invalid-author",
    start: 10,
    end: 120,
    authorId: "non-existent-author-id",
  };

  const res = await app.fetch(
    new Request("http://localhost/api/videos", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(invalidVideo),
    }),
    env,
  );
  expect(res.status).toBe(500);

  // レスポンスをテキストとして取得
  const responseText = await res.text();

  // JSONとして解析できる場合のみ検証
  if (responseText.startsWith("{")) {
    const responseData = JSON.parse(responseText);
    expect(responseData.success).toBe(false);
    // エラーメッセージに著者IDが含まれているか確認
    if (responseData.message) {
      expect(responseData.message.includes("著者")).toBeTruthy();
    }
  }
});
```

### レスポンス検証の強化

- レスポンスに含まれるネストされたオブジェクトの検証を行う
```typescript
// 著者情報も確認
expect(responseData.video.author).toBeDefined();
expect(responseData.video.author.id).toBe(targetVideo.author.id);
expect(responseData.video.author.name).toBe(targetVideo.author.name);
expect(responseData.video.author.iconUrl).toBe(targetVideo.author.iconUrl);
```

### 外部キー制約のテスト

- 外部キー制約が正しく機能していることを確認するテストを実装する
- 関連エンティティの削除時の挙動をテストする（カスケード削除または制約エラー）
- 関連エンティティの更新時の整合性をテストする

```typescript
test("著者IDを更新する", async () => {
  const targetVideo = videoList[0]; // 山田太郎の動画
  const newAuthor = authorList[1]; // 佐藤花子に変更
  const updateData = {
    authorId: newAuthor.id,
  };

  const res = await app.fetch(
    new Request(`http://localhost/api/videos/${targetVideo.id}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(updateData),
    }),
    env,
  );
  expect(res.status).toBe(200);

  // 更新されたビデオを取得して確認
  const getRes = await app.fetch(new Request(`http://localhost/api/videos/${targetVideo.id}`), env);
  const getResponseData = await getRes.json();
  expect(getResponseData.success).toBe(true);

  // 著者情報が更新されているか確認
  expect(getResponseData.video.authorId).toBe(newAuthor.id);
  expect(getResponseData.video.author).toBeDefined();
  expect(getResponseData.video.author.id).toBe(newAuthor.id);
  expect(getResponseData.video.author.name).toBe(newAuthor.name);
});
```

## APIテスト

- 完全なURLを使用してリクエスト
- レスポンス形式を確認
- 適切なアサーションを実装
- レスポンスデータに明示的な型定義を行う

```typescript
// __tests__/videos/index.test.ts
test("動画一覧を取得する", async () => {
  // 完全なURLを使用
  const res = await app.fetch(new Request("http://localhost/api/videos"), env);
  expect(res.status).toBe(200);

  // レスポンスデータの型を定義
  type ApiResponse = {
    success: boolean;
    videos: Video[];
  };

  const responseData = (await res.json()) as ApiResponse;
  expect(responseData.success).toBe(true);

  const videos = responseData.videos;
  expect(videos.length).toBe(videoList.length);
  videos.forEach((item, index) => {
    expect(item.id).toBe(videoList[index].id);
    expect(item.title).toBe(videoList[index].title);
  });
});
```

## Jest設定

- テスト環境の適切な設定
- ESモジュールの処理
- セットアップファイルの指定
- テスト実行モードの使い分け

```javascript
// jest.config.js
module.exports = {
  testEnvironment: "node",
  testMatch: ["**/*.test.ts"],
  transform: {
    "^.+\\.(j|t)sx?$": "esbuild-jest",
  },
  transformIgnorePatterns: ["node_modules/(?!nanoid/)"],
  setupFilesAfterEnv: ["<rootDir>/src/test-setup.ts"],
};
```

```json
// package.json
{
  "scripts": {
    "test": "jest --verbose",       // 通常実行（CI/CD用）
    "test:watch": "jest --verbose --watch"  // 開発用ウォッチモード
  }
}
```

## テスト実行時の注意点

- Miniflareなどのリソースは必ず解放する
- 非同期処理が残っている場合は`--detectOpenHandles`フラグで検出
- テストが自動終了しない場合は原因を特定して修正
- ウォッチモードは開発時のみ使用し、CI/CDでは通常実行を使用
- テスト実行にはbunを使用する場合は`bun run test`コマンドを使用

```bash
# テストの実行（bun）
bun run test

# テストの実行（npm）
npm test

# ウォッチモードでのテスト実行
bun run test:watch
```

```json
// package.json
{
  "scripts": {
    "test": "jest --verbose",       // 通常実行（CI/CD用）
    "test:watch": "jest --verbose --watch"  // 開発用ウォッチモード
  }
}
```

## テスト環境でのエラーハンドリング

- テスト環境ではエラーハンドラーの挙動が本番環境と異なる場合がある
- 500エラーの場合、JSONではなくHTMLやプレーンテキストが返される可能性がある
- レスポンスの内容を検証する前に、テキストとして取得して内容を確認する

```typescript
// __tests__/videos/index.test.ts
test("存在しないIDの場合のエラー処理", async () => {
  const nonExistentId = "non-existent-id";
  const res = await app.fetch(
    new Request(`http://localhost/api/videos/${nonExistentId}`),
    env
  );

  // ステータスコードの検証
  expect(res.status).toBe(500); // または404（環境による）

  // レスポンスをテキストとして取得して内容を確認
  const responseText = await res.text();
  console.log("Response text:", responseText);

  // JSONとして解析できる場合のみ検証
  if (responseText.startsWith("{")) {
    const responseData = JSON.parse(responseText);
    expect(responseData.success).toBe(false);
  }
});
```

## テスト環境のトラブルシューティング

- エラーハンドラーが期待通りに動作しない場合は、ミドルウェアの適用順序を確認
- テスト環境と本番環境の違いを理解し、テストケースを適切に調整
- 環境変数やバインディングが正しく設定されているか確認
- コンソールログを活用してデバッグ情報を収集

```typescript
// テスト中のデバッグ情報の出力
console.log("Response status:", res.status);
console.log("Response headers:", Object.fromEntries(res.headers.entries()));
console.log("Response text:", await res.text());
```

- テスト失敗時のエラーメッセージを詳細に分析
- 特にJSONパースエラーは、レスポンスの形式が期待と異なる可能性を示唆

```typescript
// JSONパースエラーを防ぐ安全な方法
let responseData;
try {
  responseData = await res.json();
} catch (error) {
  console.log("JSON parse error:", error);
  console.log("Response text:", await res.clone().text());
}
```

## 新しいリソースのテスト実装パターン

新しいリソース（テーブル）のテストを実装する際は、以下のパターンに従います：

### 1. テストデータの準備

```typescript
// __tests__/helpers/test-data.ts
// テスト用の著者データ
export const authorList: Author[] = [
  {
    id: nanoid(),
    name: "山田太郎",
    iconUrl: "https://example.com/icons/yamada.png",
    bio: "音楽プロデューサー。様々なアーティストと仕事をしています。",
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  // 他のテストデータ
];

// 新しい著者データを作成するヘルパー関数
export const createAuthorData = (overrides: Partial<Author> = {}): Author => {
  return {
    id: nanoid(),
    name: "テスト著者",
    iconUrl: "https://example.com/icons/test.png",
    bio: "テスト用の著者プロフィール",
    createdAt: new Date(),
    updatedAt: new Date(),
    ...overrides,
  };
};
```

### 2. データベースセットアップとシード処理

```typescript
// __tests__/helpers/db-setup.ts
// テーブル作成
export const setupDatabase = async (env: Bindings): Promise<void> => {
  const client = createDbClient(env.DB);
  try {
    // 既存のテーブル作成コード...

    // 新しいテーブルの作成
    await client.run(`
      CREATE TABLE IF NOT EXISTS authors (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        icon_url TEXT NOT NULL,
        bio TEXT,
        created_at TEXT NOT NULL,
        updated_at TEXT NOT NULL
      )
    `);
  } catch (error) {
    console.error("テーブル作成エラー:", error);
  }
};

// 著者テストデータのシード
export const seedAuthors = async (env: Bindings, authorList: Author[]): Promise<void> => {
  const client = createDbClient(env.DB);

  try {
    // テスト前にテーブルをクリア
    await client.delete(authors);
    // D1データベースに挿入
    for (const author of authorList) {
      // SQLiteの列名に合わせてデータを挿入
      await client.run(`
        INSERT INTO authors (id, name, icon_url, bio, created_at, updated_at)
        VALUES ('${author.id}', '${author.name}', '${author.iconUrl}', ${
          author.bio ? `'${author.bio}'` : "NULL"
        }, '${author.createdAt.toISOString()}', '${author.updatedAt.toISOString()}')
      `);
    }
  } catch (error) {
    console.error("著者シードエラー:", error);
  }
};

// レスポンス型の追加
export type AuthorListResponse = {
  success: boolean;
  authors: Author[];
};

export type AuthorDetailResponse = {
  success: boolean;
  author: Author;
};
```

### 3. テストケースの実装

```typescript
// __tests__/authors/index.test.ts
import app from "../../index";
import type { Author } from "../../models/authors";
import type { Bindings } from "../../types";
import {
  type AuthorDetailResponse,
  type AuthorListResponse,
  type IdResponse,
  type SuccessResponse,
  seedAuthors,
  setupDatabase,
} from "../helpers/db-setup";
import { authorList } from "../helpers/test-data";

describe("Authors API", () => {
  let env: Bindings;

  // テスト前に環境を初期化
  beforeAll(async () => {
    env = await getMiniflareBindings();
    await setupDatabase(env);
  });

  beforeEach(async () => {
    await seedAuthors(env, authorList);
  });

  describe("GET /api/authors", () => {
    test("著者一覧を取得する", async () => {
      const res = await app.fetch(new Request("http://localhost/api/authors"), env);
      expect(res.status).toBe(200);

      const responseData = (await res.json()) as AuthorListResponse;
      expect(responseData.success).toBe(true);

      const authors = responseData.authors;
      expect(authors.length).toBe(authorList.length);
      authors.forEach((item: Author, index: number) => {
        expect(item.id).toBe(authorList[index].id);
        expect(item.name).toBe(authorList[index].name);
      });
    });
  });

  // 他のテストケース（GET /:id, POST, PATCH, DELETE）
});
```

### 4. 各エンドポイントのテスト

各エンドポイントに対して、以下のテストケースを実装します：

1. **GET /api/[resource]**
   - 正常系: リソース一覧の取得
   - エラー系: 必要に応じて

2. **GET /api/[resource]/:id**
   - 正常系: 特定のリソースの取得
   - エラー系: 存在しないIDの場合

3. **POST /api/[resource]**
   - 正常系: 新しいリソースの作成
   - エラー系: バリデーションエラーの場合

4. **PATCH /api/[resource]/:id**
   - 正常系: リソースの更新
   - エラー系: 存在しないIDの場合、バリデーションエラーの場合

5. **DELETE /api/[resource]/:id**
   - 正常系: リソースの削除
   - エラー系: 存在しないIDの場合

```typescript
// POST /api/authors のテスト例
test("新しい著者を作成する", async () => {
  const newAuthor = {
    name: "新しいテスト著者",
    iconUrl: "https://example.com/icons/new-test.png",
    bio: "新しいテスト用の著者プロフィール",
  };

  const res = await app.fetch(
    new Request("http://localhost/api/authors", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(newAuthor),
    }),
    env,
  );
  expect(res.status).toBe(201);

  const responseData = (await res.json()) as IdResponse;
  expect(responseData.success).toBe(true);
  expect(responseData.id).toBeDefined();

  // 作成された著者を取得して確認
  const getRes = await app.fetch(
    new Request(`http://localhost/api/authors/${responseData.id}`),
    env,
  );
  const getResponseData = (await getRes.json()) as AuthorDetailResponse;
  expect(getResponseData.success).toBe(true);
  expect(getResponseData.author.name).toBe(newAuthor.name);
  expect(getResponseData.author.iconUrl).toBe(newAuthor.iconUrl);
  expect(getResponseData.author.bio).toBe(newAuthor.bio);
});
```

### 5. テスト実行

テストは`bun run test`コマンドで実行します。特定のテストファイルのみを実行する場合は、ファイル名を指定します。

```bash
# すべてのテストを実行
bun run test

# 特定のテストファイルのみを実行
bun run test -- authors
```
