---
description: Kirinuki-Playlistプロジェクトのフロントエンド開発コーディング規約
globs: src/**/*.{ts,tsx}
alwaysApply: false
---
# Kirinuki-Playlist プロジェクトコーディング規約

## コードスタイル

### 全般

- TypeScript を使用する
- コンポーネントは関数コンポーネントとして実装する
- 可能な限り型定義を明示する
- `any`型の使用は避ける
- コンポーネントの props には適切な型定義を行う
- 命名規則はキャメルケース（変数・関数）、パスカルケース（コンポーネント・型）を使用する
- 関数の戻り値の型は明示的に定義する
- 複雑な型は型エイリアスまたはインターフェースとして定義する

### ファイル構成

- コンポーネントは機能ごとにディレクトリを分ける
- 関連するコンポーネントは同じディレクトリに配置する
- テストファイルは`__tests__`ディレクトリに配置する
- 定数は`consts.ts`ファイルに定義する
- 国際化関連のファイルは`i18n`ディレクトリに配置する
- 型定義は`types.ts`ファイルに集約する
- フックは`hooks.ts`ファイルに実装する
- ユーティリティ関数は`utils.ts`ファイルに実装する

### コンポーネント

- UI コンポーネントは`src/components/ui`ディレクトリに配置する
- 機能コンポーネントは`src/components/parts`ディレクトリに配置する
- クライアントコンポーネントには`"use client";`ディレクティブを先頭に記述する
- コンポーネントの props は分割代入を使用する
- コンポーネントは適切な名前空間を持つ（例: `Nav*`, `App*`）
- 大きなコンポーネントは小さなコンポーネントに分割する
- コンポーネントの責務は単一にする（単一責任の原則）

### フック

- カスタムフックの名前は`use`プレフィックスで始める
- フックは再利用可能な形で実装する
- フックの引数と戻り値には適切な型定義を行う
- 複雑なロジックはフックに抽出する
- 状態管理ロジックはコンポーネントから分離する
- 副作用は`useEffect`内に限定する
- 依存配列は明示的に指定する

### スタイリング

- Tailwind CSS を使用する
- 複雑なスタイリングは CSS Modules または styled-components を使用する
- コンポーネント特有のスタイルは同じディレクトリに配置する
- 共通のスタイルは Tailwind の @apply ディレクティブでまとめる
- レスポンシブデザインは Tailwind のブレークポイントを使用する
- カラーパレットは Tailwind の設定ファイルで定義する
- アニメーションは CSS Transitions または Framer Motion を使用する

### 状態管理

- ローカル状態には `useState` または `useReducer` を使用する
- グローバル状態には React Context または Zustand を使用する
- 複雑な状態管理ロジックはカスタムフックに抽出する
- フォーム管理には React Hook Form を使用する
- 状態の型定義は明示的に行う
- イミュータブルな状態更新を行う

## アプリケーション構造

### ディレクトリ構造

```
src/
├── app/                    # Next.js App Router
│   ├── api/                # API ルート
│   ├── (auth)/             # 認証関連ページ
│   └── (main)/             # メインコンテンツページ
├── components/             # コンポーネント
│   ├── ui/                 # 汎用UIコンポーネント
│   ├── parts/              # 機能コンポーネント
│   └── layouts/            # レイアウトコンポーネント
├── contexts/               # React コンテキスト
├── hooks/                  # カスタムフック
├── lib/                    # ユーティリティ関数
├── repositories/           # API クライアント
├── db/                     # データベース関連
│   ├── config/             # DB 設定
│   ├── models/             # データモデル
│   └── services/           # サービス層
└── types/                  # グローバル型定義
```

### ルーティング

- Next.js の App Router を使用する
- ページはディレクトリベースのルーティングに従って配置する
- 動的ルートには適切なセグメントを使用する
- ネストされたレイアウトを活用する
- リダイレクトは middleware または redirect 関数を使用する
- ルート間のナビゲーションには Link コンポーネントを使用する
- プログラムによるナビゲーションには useRouter フックを使用する
- クライアントサイドのルーティングパスは `src/consts/clientpath.ts` の `CLIENT_PATH` 定数を使用する
- 動的パラメータを含むパスは `getDetailPath` ユーティリティ関数を使用して生成する

### データフェッチ

- サーバーコンポーネントでは非同期関数を使用する
- データフェッチを行うコンポーネントはSuspenseでラップする
- クライアントコンポーネントでのデータフェッチは最小限に抑える
- APIエンドポイントとの通信はリポジトリ層で抽象化する
- データフェッチ中のUI状態はSuspenseのfallbackで処理する
- エラーハンドリングはError Boundaryで実装する
- データの型はZodスキーマで検証する
- キャッシュ戦略はNext.jsのキャッシングメカニズムを使用する

### エラーハンドリング

- エラーバウンダリを適切に配置する
- ユーザーに分かりやすいエラーメッセージを表示する
- サーバーサイドのエラーとクライアントサイドのエラーを適切に処理する
- ネットワークエラーは専用の UI で処理する
- フォームのバリデーションエラーはフィールド単位で表示する
- エラーログは開発環境でのみ詳細に表示する
- エラー状態からの回復手段を提供する

### パフォーマンス最適化

- コンポーネントのメモ化を適切に行う
- 大きなリストには仮想化を使用する
- 画像は Next.js の Image コンポーネントで最適化する
- バンドルサイズを意識した実装を行う
- レンダリングパフォーマンスを定期的に計測する
- サーバーサイド処理とクライアントサイド処理を適切に分ける
- Suspense と Streaming を活用する

### アクセシビリティ

- セマンティック HTML を使用する
- キーボードナビゲーションをサポートする
- ARIA 属性を適切に使用する
- 適切なコントラスト比を確保する
- スクリーンリーダーでの読み上げを考慮した実装を行う
- フォーカス管理を適切に行う
- アクセシビリティ要件に対するテストを実施する

### コンポーネント設計の原則

- コンポーネントは小さく保つ（最大200行程度）
- 単一責任の原則に従う
- 明確なAPIを持つ
- 状態とロジックを適切に分離する
- データフェッチを行うコンポーネントはSuspenseでラップする
- 非同期データを扱うコンポーネントは適切なローディングUIを提供する
- 再利用可能なコンポーネントにはStorybookを作成する
- コンポーネントにはJestテストを書く
- UIコンポーネントはビジネスロジックに依存しない

### テスト

- Jest と React Testing Library を使用する
- ユニットテストは機能単位で実装する
- インテグレーションテストは主要なユーザーフローをカバーする
- E2E テストは Playwright を使用する
- テストカバレッジは主要な機能で高く保つ
- スナップショットテストは変更が多い UI には使用しない
- テストはユーザーが使用する方法に沿った形で書く

### ドキュメンテーション

- 複雑なコンポーネントには JSDoc コメントを付ける
- API 仕様は明確に文書化する
- Storybook でコンポーネントのユースケースを示す
- README には主要な情報とセットアップ手順を記載する
- チーム間で共有される関数やコンポーネントは特に丁寧にドキュメント化する
- コンポーネントの props は型定義で自己文書化する
- コードコメントは「なぜ」そうしたのかを説明する

## 品質保証

### Linting と Formatting

- ESLint を使用してコード品質を保つ
- Prettier を使用して一貫したフォーマットを維持する
- husky と lint-staged を使用して commit 前にチェックを行う
- TypeScript の strict モードを有効にする
- Path エイリアスを使用して相対パスの乱用を避ける
- import 順は自動整形ツールで統一する
- 未使用の import やコードは削除する

### CI/CD

- GitHub Actions での自動ビルドとテストを実施する
- Pull Request 時に静的解析とテストを実行する
- Vercel での自動デプロイを設定する
- E2E テストを定期的に実行する
- バンドルサイズの監視を行う
- パフォーマンスメトリクスをモニタリングする
- デプロイ前後での視覚的回帰テストを行う

### セキュリティ

- 環境変数で機密情報を管理する
- XSS 対策として適切なコンテンツセキュリティポリシーを設定する
- CSRF 対策を実装する
- 外部ライブラリの脆弱性を定期的にチェックする
- ユーザー入力は適切にサニタイズする
- 認証と認可のロジックを厳密に実装する
- API レスポンスの型検証を徹底する

## 特定の機能実装ガイドライン

### プレイリスト関連

- プレイリスト一覧と詳細表示の UI コンポーネントを分離する
- プレイリスト作成・編集フォームは共通コンポーネントとして実装する
- 動画の並び替えは drag-and-drop インターフェースで実装する
- プレイリストのクエリキャッシュは適切に無効化する
- プレイリスト関連の状態変更はサーバーとの同期を確実に行う
- プレイリスト関連のエラーメッセージはユーザーフレンドリーにする

### ビデオ再生関連

- 動画プレーヤーは React Player を使用する
- カスタムコントロールは UI コンポーネントとして実装する
- 再生位置の保存と復元機能を実装する
- プレイリスト内の自動再生と次の動画への移動をサポートする
- 再生速度、音量などの設定はローカルストレージに保存する
- 動画の開始時間と終了時間を指定できるようにする
- モバイルデバイスでの再生体験を最適化する

### ユーザー認証

- Next.js の middleware を使用して認証状態を確認する
- Clerk を使用した認証システムを実装する
  - `clerkMiddleware` を使用してルート保護を実装する
  - 保護するルートは `createRouteMatcher` で定義する
  - リダイレクトURLは絶対URLとして `new URL(パス, req.url).toString()` の形式で指定する
  - `auth.protect()` メソッドのオプションとして `unauthenticatedUrl` と `unauthorizedUrl` を設定する
- 認証が必要なページへの未認証アクセスは専用のログイン要求ページにリダイレクトする
- ログイン要求ページには分かりやすいUI/UXを提供し、サイドバーへの誘導を含める
- API保護には適切なパターンマッチングを使用する（例: `/api/(.*)`）
- セッション管理はClerkの機能を使用する
- 認証状態はClerkのフックを通じて管理する
- 認証エラーは専用のエラーハンドラーで処理する
- ソーシャルログインとEmail/Password認証の両方をサポートする

### ユーティリティ関数

- 共通ロジックはユーティリティ関数として抽出する
- ユーティリティ関数は `src/utils` ディレクトリに配置する
- 関連するユーティリティ関数は適切なファイルにグループ化する
- 各ユーティリティ関数は単一の責任を持つようにする
- 複雑なロジックは小さな関数に分割する
- ユーティリティ関数には適切な型定義と JSDoc を付与する
- 特定のコンポーネントに限定されるユーティリティはコンポーネントと同じディレクトリに配置する

### クライアントパスの管理

- クライアントサイドのルーティングパスは `src/consts/clientpath.ts` で一元管理する
- `CLIENT_PATH` オブジェクトを使用して、すべてのルートを定義する
- 静的パスと動的パスを明確に区別する
- 動的パスはパラメータを `:id` のような形式で明示する
- 動的パスに実際の値を挿入する場合は `getDetailPath` ユーティリティ関数を使用する
- 新しいルートを追加する場合は、必ず `CLIENT_PATH` オブジェクトに定義する
- コード内のハードコードされたパスは避け、常に `CLIENT_PATH` 経由でアクセスする
- Link コンポーネントの href 属性や useRouter().push() の引数には `CLIENT_PATH` を使用する
