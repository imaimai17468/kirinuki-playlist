# Kirinuki-Playlist プロジェクトルール

## コードスタイル

### 全般

- TypeScript を使用する
- コンポーネントは関数コンポーネントとして実装する
- 可能な限り型定義を明示する
- `any`型の使用は避ける
- コンポーネントの props には適切な型定義を行う
- 命名規則はキャメルケース（変数・関数）、パスカルケース（コンポーネント・型）を使用する

### ファイル構成

- コンポーネントは機能ごとにディレクトリを分ける
- 関連するコンポーネントは同じディレクトリに配置する
- テストファイルは`__tests__`ディレクトリに配置する
- 定数は`consts.ts`ファイルに定義する
- 国際化関連のファイルは`i18n`ディレクトリに配置する

### コンポーネント

- UI コンポーネントは`src/components/ui`ディレクトリに配置する
- 機能コンポーネントは`src/components/parts`ディレクトリに配置する
- クライアントコンポーネントには`"use client";`ディレクティブを先頭に記述する
- コンポーネントの props は分割代入を使用する
- コンポーネントは適切な名前空間を持つ（例: `Nav*`, `App*`）

### スタイリング

- スタイリングは Tailwind CSS を使用する
- クラス名の結合には`cn`ユーティリティを使用する
- 条件付きクラスには`className={cn()}`パターンを使用する
- コンポーネントのバリエーションには`class-variance-authority`を使用する

## テスト

### テスト全般

- テストフレームワークは Bun のテストランナーを使用する
- テストファイルの命名は`*.test.tsx`とする
- 各テストの後に`cleanup()`を実行する
- テストケースは英語または日本語で記述する（プロジェクトで統一する）

### コンポーネントテスト

- コンポーネントのレンダリングテストを必ず実装する
- 状態変化を伴うコンポーネントは、状態変化のテストを実装する
- ユーザーインタラクションのテストには`fireEvent`を使用する
- コンテキストを使用するコンポーネントは、テスト時にプロバイダーでラップする
- モックデータは各テストファイル内で定義する
- 外部依存（Next.js のルーターなど）はモック化する

### テストの構造

- `describe`ブロックでコンポーネント名をグループ化する
- `it`ブロックでテストケースを記述する
- テストケースは明確な動作を説明する形式で記述する
- 各テストは独立して実行できるようにする
- `beforeEach`/`afterEach`でテスト環境のセットアップ/クリーンアップを行う

## プロジェクト固有のルール

### サイドバーコンポーネント

- サイドバー関連のコンポーネントは`src/components/parts/sidebar`ディレクトリに配置する
- ナビゲーション関連のコンポーネントは`navigation`サブディレクトリに配置する
- サイドバーのアイテム定義は`consts.ts`に集約する
- サイドバーコンポーネントは`SidebarProvider`でラップして使用する

### ブレッドクラム

- パスセグメントに基づいてブレッドクラムを生成する
- 最後のセグメントは`BreadcrumbPage`として表示する
- 中間のセグメントは`BreadcrumbLink`として表示する

### ユーザーインターフェース

- ドロップダウンメニューには`@radix-ui/react-dropdown-menu`を使用する
- アバターには`@radix-ui/react-avatar`を使用する
- アイコンには`lucide-react`を使用する
- 折りたたみ可能な要素には`@radix-ui/react-collapsible`を使用する

## コード品質

### リンター・フォーマッター

- Biome を使用してコードの品質を保つ
- `biome check`でコードをチェックする
- `biome format`でコードをフォーマットする
- コミット前に lefthook を使用して自動チェックを行う

### 型チェック

- `tsc --noEmit`で型チェックを行う
- 型エラーは修正してからコミットする

### テスト実行

- `bun test`でテストを実行する
- `bun test --watch`で開発中のテスト監視を行う
- CI では全テストが通過することを確認する
