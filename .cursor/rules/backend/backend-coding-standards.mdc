---
description: Kirinuki-Playlistプロジェクトのバックエンド開発コーディング規約
globs: apps/backend/**/*.ts
---
# バックエンド開発コーディング規約

> **注意**: このファイルは基本的なコーディング規約のみを含みます。詳細な規約は以下の専用ファイルを参照してください：
> - [backend-testing-standards.mdc](mdc:.cursor/rules/backend-testing-standards.mdc)
> - [backend-error-handling.mdc](mdc:.cursor/rules/backend-error-handling.mdc)
> - [backend-database.mdc](mdc:.cursor/rules/backend/backend-database.mdc)

## プロジェクト構造

バックエンドコードは以下の構造に従って整理します：

```
src/
├── controllers/        # ルートハンドラー
│   └── [resource].ts   # リソース別のコントローラー
├── models/             # データモデル
│   └── [resource].ts   # リソース別のスキーマ定義
├── services/           # ビジネスロジック
│   └── [resource].ts   # リソース別のサービス
├── middlewares/        # ミドルウェア
│   └── [name].ts       # 機能別のミドルウェア
├── utils/              # ユーティリティ関数
│   └── [name].ts       # 機能別のユーティリティ
├── types/              # 型定義
│   └── index.ts        # 共通の型定義
├── config/             # 設定
│   └── [name].ts       # 機能別の設定
└── index.ts            # エントリーポイント
```

## 責任の分離

### コントローラー
- リクエストの検証
- レスポンスの整形
- サービスの呼び出し
- ルーティングの定義

```typescript
// controllers/videos.ts
videosRouter.get("/:id", async (c) => {
  const id = c.req.param("id");
  const video = await videoService.getVideoById(c.env.DB, id);
  return c.json({ success: true, video });
});
```

### サービス
- ビジネスロジックの実装
- データベース操作
- エラーハンドリング
- トランザクション管理

```typescript
// services/videos.ts
async getVideoById(db: D1Database, id: string): Promise<Video> {
  const client = createDbClient(db);
  try {
    const video = await client
      .select()
      .from(videos)
      .where(eq(videos.id, id))
      .get();

    if (!video) {
      throw new NotFoundError(`ID: ${id} の動画が見つかりません`);
    }

    return video;
  } catch (error) {
    // エラーハンドリング
  }
}
```

### モデル
- データスキーマの定義
- バリデーションルールの定義
- 型定義のエクスポート

```typescript
// models/videos.ts
export const videos = sqliteTable(
  "videos",
  {
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    // ...
  }
);

export const videoInsertSchema = createInsertSchema(videos, {
  id: z.undefined(),
  title: z.string().min(1, "タイトルは必須です"),
  // ...
});
```

## 型安全性

- 明示的な型定義
- `any`型の使用を避ける
- インターフェースと型エイリアスの適切な使用
- Drizzle ORMの型推論を活用

```typescript
// types/index.ts
export type Video = InferSelectModel<typeof videos>;
export type VideoInsert = Omit<InferInsertModel<typeof videos>, "id" | "createdAt" | "updatedAt">;
```

## API設計

- RESTful原則に従う
- 一貫したエンドポイント命名
- 適切なHTTPメソッドの使用
- 明確なレスポンス形式

```
GET /api/videos          # 一覧取得
GET /api/videos/:id      # 詳細取得
POST /api/videos         # 新規作成
PATCH /api/videos/:id    # 部分更新
DELETE /api/videos/:id   # 削除
```

### APIパスの構造

- `/api/`プレフィックスはフロントエンド層で付与される場合があるため、バックエンドでのパス設定では省略する
- バックエンドのルーティングでは、リソース名を直接パスとして使用する（例：`/videos`、`/authors`）
- フロントエンドとバックエンドの統合時に、フロントエンドのルーティング層で `/api/` プレフィックスを追加する
- この分離により、フロントエンドからのアクセス時に `/api/api/...` のような冗長なパスを防ぐ

```typescript
// バックエンドのルーティング（推奨）
app.route("/videos", videosRouter);

// フロントエンドからのアクセス
// fetch("/api/videos") // 適切
// fetch("/api/api/videos") // 冗長・不適切
```

## データベースとモデル

データベース操作、マイグレーション、リレーションシップの処理に関するガイドラインは [backend-database.mdc](mdc:.cursor/rules/backend/backend-database.mdc) を参照してください。

## 環境変数

- `.env`ファイルでの管理
- 型安全な環境変数アクセス
- デフォルト値の提供
- 必須環境変数の検証

```typescript
// wrangler.jsonc
{
  "vars": {
    "API_KEY": "xxx"
  }
}
```

## ドキュメント

- コードコメント
- API仕様書
- README
- 変更履歴

## セキュリティ

- 入力バリデーション
- 認証と認可
- レート制限
- CORS設定

## パフォーマンス

- キャッシュの活用
- クエリの最適化
- 非同期処理の適切な使用
- リソースの効率的な利用
