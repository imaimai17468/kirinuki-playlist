---
description: 
globs: 
---
# Cloudflare D1データベース管理ガイド

## データベース構成

Kirinuki-Playlistプロジェクトでは、本番環境ではCloudflare D1、開発環境ではLibSQLをデータベースとして使用し、Drizzle ORMを通じてアクセスします。

### ディレクトリ構造

```
src/
├── db/
│   ├── config/                # データベース構成
│   │   ├── database.ts        # DB接続管理
│   │   ├── client.ts          # APIクライアント
│   │   ├── hono.ts            # Honoアプリ構成
│   │   └── test-database.ts   # テスト環境DB設定
│   ├── models/                # データモデル定義
│   │   ├── videos.ts          # 動画モデル
│   │   ├── authors.ts         # 作者モデル
│   │   ├── playlists.ts       # プレイリストモデル
│   │   ├── relations.ts       # リレーション定義
│   │   └── index.ts           # モデルのエクスポート
│   ├── services/              # サービス層
│   │   ├── videos/            # 動画サービス
│   │   ├── authors/           # 作者サービス
│   │   └── playlists/         # プレイリストサービス
│   ├── middlewares/           # DB関連ミドルウェア
│   │   └── error-handler.ts   # エラーハンドリング
│   └── utils/
│       └── errors.ts          # エラー定義
├── repositories/              # クライアントサイド用データアクセス層
│   ├── videos/
│   ├── authors/
│   └── playlists/
└── app/
    └── api/                   # API実装
        └── [...route]/        # Honoルート実装
```

## データベースクライアント管理

Kirinuki-Playlistプロジェクトでは、異なる環境（本番、開発、テスト）に対応する柔軟なデータベースクライアント管理を実装しています：

### データベースクライアント

```typescript
// src/db/config/database.ts
import type { D1Database } from "@cloudflare/workers-types";
import { createClient } from "@libsql/client/web";
import { drizzle } from "drizzle-orm/d1";
import { drizzle as drizzleSqlite } from "drizzle-orm/libsql";

/**
 * 本番環境用のデータベースクライアントを作成します
 * Cloudflare WorkersのD1データベースを使用
 */
export const createDbClient = (db: D1Database) => {
  return drizzle(db);
};

/**
 * 開発環境用のデータベースクライアントを作成します
 * Edge環境対応版 - マイグレーションなし
 * libsqlサーバーに接続
 */
export const createDevDbClient = async () => {
  // WebクライアントでlibsqlサーバーにHTTP接続
  const url = process.env.LIBSQL_URL || "http://localhost:8080";
  const client = createClient({
    url,
  });

  // Drizzle ORMのクライアントを作成 - マイグレーションなし
  return drizzleSqlite(client);
};
```

### テスト環境用データベース

```typescript
// src/db/config/test-database.ts
import Database from "bun:sqlite";
import { drizzle as drizzleSqlite } from "drizzle-orm/bun-sqlite";
import { migrate as migrateSqlite } from "drizzle-orm/bun-sqlite/migrator";

/**
 * テスト環境用のデータベースクライアントを作成します
 * インメモリSQLiteデータベースを使用
 */
export const createTestDbClient = async (migrationsPath = "./drizzle") => {
  const client = new Database(":memory:");
  const db = drizzleSqlite(client);
  await migrateSqlite(db, { migrationsFolder: migrationsPath });

  return drizzleSqlite(client);
};
```

## API構成と依存性注入

HonoアプリケーションとAPIルーターは、依存性注入パターンを使用して実装されています：

```typescript
// src/db/config/hono.ts
import { authorsRouter } from "@/app/api/[...route]/author";
import { playlistsRouter } from "@/app/api/[...route]/playlists";
import { videosRouter } from "@/app/api/[...route]/videos";
import type { createDbClient } from "@/db/config/database";
import { createDevDbClient } from "@/db/config/database";
import type { createTestDbClient } from "@/db/config/test-database";
import { errorHandler } from "@/db/middlewares/error-handler";
import type { Bindings } from "@/db/types/bindings";
import type { MiddlewareHandler } from "hono";
import { Hono } from "hono";

// DBクライアント型の定義
export type DbClient =
  | ReturnType<typeof createDbClient>
  | Awaited<ReturnType<typeof createTestDbClient>>
  | Awaited<ReturnType<typeof createDevDbClient>>;

// 依存性を格納するための型拡張
type Variables = {
  dbClient?: DbClient;
};

// Bindings型にVariablesを追加した合成型
export type AppEnv = {
  Bindings: Bindings;
  Variables: Variables;
};

/**
 * 環境に応じたHonoアプリケーションを作成する関数
 * 本番環境では実際のD1データベースを使用し、テスト環境ではテスト用DBクライアントを使用
 */
export function createHonoApp(options?: { dbClient?: DbClient }) {
  // 依存性をコンテキストに注入するミドルウェア
  const injectDependencies: MiddlewareHandler<AppEnv> = async (c, next) => {
    // dbClientが直接提供されている場合はそれを使用
    if (options?.dbClient) {
      c.set("dbClient", options.dbClient);
    } else if (process.env.NODE_ENV === "development") {
      const client = await createDevDbClient();
      c.set("dbClient", client);
    }
    await next();
  };

  // Honoアプリケーションの組み立て
  const app = new Hono<AppEnv>()
    .basePath("/api")
    .use("*", errorHandler)
    .use("*", injectDependencies) // 依存性注入ミドルウェア
    .route("/authors", authorsRouter)
    .route("/videos", videosRouter)
    .route("/playlists", playlistsRouter)
    .get("/hello", (c) => c.json({ status: "ok" }));

  return app;
}
```

## サービス層の実装と依存性注入パターン

サービス層ではデータベースクライアントを外部から注入する依存性注入パターンを採用し、テスト容易性と柔軟性を高めています：

```typescript
// src/db/services/playlists/playlists.ts
import type { DbClient } from "@/db/config/hono";
import { and, eq } from "drizzle-orm";
import { nanoid } from "nanoid";
import { authors } from "../../models/authors";
import { type Playlist, playlists } from "../../models/playlists";
import { playlistVideos } from "../../models/relations";
import { videos } from "../../models/videos";
import { DatabaseError, NotFoundError } from "../../utils/errors";

// 著者情報を含むプレイリストの型
export type PlaylistWithAuthor = Playlist & {
  author: {
    id: string;
    name: string;
    iconUrl: string;
    bio: string | null;
    createdAt: Date;
    updatedAt: Date;
  };
};

export type PlaylistWithAuthorAndVideos = PlaylistWithAuthor & {
  videos: {
    id: string;
    title: string;
    url: string;
    start: number | null;
    end: number | null;
    order: number; // 並び順情報
    createdAt: Date;
    updatedAt: Date;
    author: {
      id: string;
      name: string;
      iconUrl: string;
      bio: string | null;
      createdAt: Date;
      updatedAt: Date;
    };
  }[];
};

// 依存性注入パターンを使ったプレイリストサービスの作成関数
export const createPlaylistService = (dbClient: DbClient) => ({
  // プレイリスト関連のメソッド実装...

  async getPlaylistWithVideosById(id: string): Promise<PlaylistWithAuthorAndVideos> {
    try {
      // まずプレイリスト情報を取得
      const playlist = await this.getPlaylistById(id);

      // 次にこのプレイリストに含まれる動画を取得（order順でソート）
      const playlistVideosResult = await dbClient
        .select()
        .from(playlistVideos)
        .innerJoin(videos, eq(playlistVideos.videoId, videos.id))
        .innerJoin(authors, eq(videos.authorId, authors.id))
        .where(eq(playlistVideos.playlistId, id))
        .orderBy(playlistVideos.order)
        .all();

      // 動画情報をマッピング（order情報を含む）
      const videosWithAuthors = playlistVideosResult.map((row) => ({
        id: row.videos.id,
        title: row.videos.title,
        url: row.videos.url,
        start: row.videos.start,
        end: row.videos.end,
        authorId: row.videos.authorId,
        order: row.playlist_videos.order,
        createdAt: row.videos.createdAt,
        updatedAt: row.videos.updatedAt,
        author: {
          id: row.authors.id,
          name: row.authors.name,
          iconUrl: row.authors.iconUrl,
          bio: row.authors.bio,
          createdAt: row.authors.createdAt,
          updatedAt: row.authors.updatedAt,
        },
      }));

      // プレイリスト情報と動画情報を組み合わせて返す
      return {
        ...playlist,
        videos: videosWithAuthors,
      };
    } catch (error) {
      // エラーハンドリング
    }
  },
});
```

## リレーションシップの定義

プロジェクトでは、Drizzle ORMのリレーションシップAPIを使用して、テーブル間の関係を明示的に定義しています：

```typescript
// src/db/models/relations.ts
import { relations } from "drizzle-orm";
import { integer, sqliteTable, text } from "drizzle-orm/sqlite-core";
import { authors } from "./authors";
import { playlists } from "./playlists";
import { videos } from "./videos";

// プレイリストと動画の中間テーブル定義
export const playlistVideos = sqliteTable(
  "playlist_videos",
  {
    id: text("id").primaryKey(),
    playlistId: text("playlist_id").notNull(),
    videoId: text("video_id").notNull(),
    order: integer("order").notNull(), // 並び順を管理するフィールド
    createdAt: integer("created_at", { mode: "timestamp" }).notNull(),
    updatedAt: integer("updated_at", { mode: "timestamp" }).notNull(),
  },
  () => [],
);

// 動画と作者のリレーション
export const videosRelations = relations(videos, ({ one, many }) => ({
  author: one(authors, {
    fields: [videos.authorId],
    references: [authors.id],
  }),
  playlistVideos: many(playlistVideos),
}));

// 作者と動画・プレイリストのリレーション
export const authorsRelations = relations(authors, ({ many }) => ({
  videos: many(videos),
  playlists: many(playlists),
}));

// プレイリストと作者・中間テーブルのリレーション
export const playlistsRelations = relations(playlists, ({ one, many }) => ({
  author: one(authors, {
    fields: [playlists.authorId],
    references: [authors.id],
  }),
  playlistVideos: many(playlistVideos),
}));

// 中間テーブルとプレイリスト・動画のリレーション
export const playlistVideosRelations = relations(playlistVideos, ({ one }) => ({
  playlist: one(playlists, {
    fields: [playlistVideos.playlistId],
    references: [playlists.id],
  }),
  video: one(videos, {
    fields: [playlistVideos.videoId],
    references: [videos.id],
  }),
}));
```

## リポジトリパターンの実装

クライアントサイドのデータアクセスは、リポジトリパターンを使用して実装されています。これにより、UIコンポーネントからデータアクセスロジックを分離し、コードの再利用性と保守性を高めています：

```typescript
// src/repositories/playlists/index.ts
import { getApiClient } from "@/db/config/client";
import { Result, err, ok } from "neverthrow";
import { type PlaylistResponse, playlistResponseSchema } from "./types";

// プレイリスト取得関数
export async function getPlaylistById(
  id: string,
): Promise<Result<PlaylistResponse["playlist"], Error>> {
  try {
    const response = await getApiClient().api.playlists[id].$get();

    if (!response.ok) {
      if (response.status === 404) {
        return err(new Error(`ID: ${id} のプレイリストが見つかりません`));
      }
      return err(new Error(`プレイリスト取得中にエラーが発生しました: ${response.status}`));
    }

    const data = await response.json();
    // スキーマバリデーション
    const result = playlistResponseSchema.safeParse(data);

    if (!result.success) {
      return err(new Error(`レスポンスの形式が不正です: ${result.error.message}`));
    }

    return ok(result.data.playlist);
  } catch (error) {
    return err(
      error instanceof Error
        ? error
        : new Error("プレイリスト取得中に予期しないエラーが発生しました"),
    );
  }
}
```

## データスキーマ検証

API通信とデータ検証には、Zodスキーマを使用しています：

```typescript
// src/repositories/playlists/types.ts
import { z } from "zod";
import { authorSchema } from "../authors/types";
import { baseResponseSchema } from "../types";
import { videoSchema } from "../videos/types";

// プレイリスト内の動画スキーマ（order情報を含む）
export const playlistVideoSchema = videoSchema.extend({
  order: z.number(),
});

// プレイリストスキーマ
export const playlistSchema = z.object({
  id: z.string(),
  title: z.string(),
  authorId: z.string(),
  createdAt: z
    .number()
    .or(z.string())
    .transform((val) => (typeof val === "string" ? new Date(val) : new Date(val))),
  updatedAt: z
    .number()
    .or(z.string())
    .transform((val) => (typeof val === "string" ? new Date(val) : new Date(val))),
  // 関連するauthorフィールド
  author: authorSchema.optional(),
  // 関連するvideoフィールド（並び順情報を含む）
  videos: z.array(playlistVideoSchema).optional(),
});

// レスポンススキーマ
export const playlistsResponseSchema = baseResponseSchema.extend({
  playlists: z.array(playlistSchema),
});

export const playlistResponseSchema = baseResponseSchema.extend({
  playlist: playlistSchema,
});

// 型定義
export type PlaylistsResponse = z.infer<typeof playlistsResponseSchema>;
export type PlaylistResponse = z.infer<typeof playlistResponseSchema>;
```

## マイグレーション管理

Cloudflare D1とDrizzle ORMを使用したマイグレーションの正しいワークフローは以下の通りです：

1. **スキーマ定義**：`src/db/models`ディレクトリ内のテーブル定義を編集します

2. **マイグレーションファイル生成**：
   ```bash
   bun run generate
   ```
   このコマンドは`drizzle-kit generate`を実行し、`drizzle`ディレクトリにマイグレーションファイルを生成します

3. **ローカル環境へのマイグレーション適用**：

   **Cloudflare D1向け**:
   ```bash
   bun run migrate:local
   ```
   このコマンドは`wrangler d1 migrations apply kirinuki-playlist --local`を実行し、マイグレーションをローカル開発環境のD1データベースに適用します

   **LibSQL向け**:
   ```bash
   bun run migrate:server
   ```
   このコマンドは`bun scripts/migrate.ts`を実行し、マイグレーションをローカル開発環境のLibSQLサーバーに適用します

4. **リモート環境へのマイグレーション適用**（必要な場合）：
   ```bash
   bun run migrate:remote
   ```
   このコマンドは`wrangler d1 migrations apply kirinuki-playlist --remote`を実行し、マイグレーションをリモート環境のD1データベースに適用します

## 多対多リレーションシップの実装例：プレイリスト・動画

プレイリストと動画の多対多関係は、`playlistVideos`中間テーブルを使用して実装されています。このテーブルには以下の特徴があります：

1. **順序管理**: `order`フィールドを使用して、プレイリスト内の動画の表示順序を管理
2. **結合クエリ**: 複数のテーブルをJOINして関連データを一度に取得
3. **整形されたレスポンス**: ネストされたオブジェクト構造でクライアントに返す

プレイリストへの動画追加時には、以下のような処理が行われます：

```typescript
// プレイリストに動画を追加するメソッド（例）
async addVideoToPlaylist(playlistId: string, videoData: PlaylistVideoInsert): Promise<void> {
  try {
    // 現在の日時
    const now = new Date();

    // 動画が存在するか確認
    const videoExists = await dbClient
      .select()
      .from(videos)
      .where(eq(videos.id, videoData.videoId))
      .get();

    if (!videoExists) {
      throw new NotFoundError(`ID: ${videoData.videoId} の動画が見つかりません`);
    }

    // プレイリストが存在するか確認
    const playlistExists = await dbClient
      .select()
      .from(playlists)
      .where(eq(playlists.id, playlistId))
      .get();

    if (!playlistExists) {
      throw new NotFoundError(`ID: ${playlistId} のプレイリストが見つかりません`);
    }

    // 既に追加されていないか確認
    const existing = await dbClient
      .select()
      .from(playlistVideos)
      .where(
        and(
          eq(playlistVideos.playlistId, playlistId),
          eq(playlistVideos.videoId, videoData.videoId)
        )
      )
      .get();

    if (existing) {
      // 既に存在する場合はorderのみ更新
      await dbClient
        .update(playlistVideos)
        .set({
          order: videoData.order,
          updatedAt: now,
        })
        .where(eq(playlistVideos.id, existing.id))
        .run();
      return;
    }

    // 存在しない場合は新規作成
    const id = nanoid();
    await dbClient.insert(playlistVideos).values({
      id,
      playlistId,
      videoId: videoData.videoId,
      order: videoData.order,
      createdAt: now,
      updatedAt: now,
    });
  } catch (error) {
    // エラーハンドリング
  }
}
```

## テストフレームワーク

プロジェクトでは、Bunのテストランナーを使用したテストが実装されています。各サービスとリポジトリには、機能を検証するためのテストケースが用意されています：

```typescript
// src/db/services/playlists/playlists.test.ts
import { beforeEach, describe, expect, test } from "bun:test";
import { createTestDbClient } from "../../config/test-database";
import { NotFoundError } from "../../utils/errors";
import { createPlaylistService } from "./playlists";

// セットアップ関数
async function setupDatabase() {
  const dbClient = await createTestDbClient();
  const service = createPlaylistService(dbClient);

  // テストデータの挿入...

  return { dbClient, service };
}

describe("playlistService", () => {
  describe("getPlaylistWithVideosById", () => {
    let service: ReturnType<typeof createPlaylistService>;

    beforeEach(async () => {
      const result = await setupDatabase();
      service = result.service;
    });

    test("IDを指定してプレイリストと関連動画を取得できること", async () => {
      const result = await service.getPlaylistWithVideosById("playlist1");

      expect(result.id).toBe("playlist1");
      expect(result.title).toBe("テストプレイリスト1");
      expect(result.videos).toBeDefined();

      // 動画のorder情報が取得できていることを確認
      const video1 = result.videos.find((v) => v.id === "video1");
      expect(video1?.order).toBeDefined();

      // 複数の動画がある場合、order順にソートされていることを確認
      if (result.videos.length >= 2) {
        for (let i = 1; i < result.videos.length; i++) {
          const previousVideo = result.videos[i - 1];
          const currentVideo = result.videos[i];
          expect(previousVideo.order).toBeLessThanOrEqual(currentVideo.order);
        }
      }
    });
  });
});
```

## エラーハンドリング

エラーハンドリングは、カスタムエラークラスと専用のミドルウェアを使用して一元化されています：

```typescript
// src/db/utils/errors.ts
export class DatabaseError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "DatabaseError";
  }
}

export class NotFoundError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "NotFoundError";
  }
}

export class UniqueConstraintError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "UniqueConstraintError";
  }
}
```

## トラブルシューティング

- **テーブルが存在しないエラー**：「no such table: XXX」というエラーが発生した場合、マイグレーションが適用されていません。`bun run migrate:local`または`bun run migrate:server`を実行してください。

- **マイグレーション適用エラー**：「table already exists」というエラーが発生した場合、マイグレーションの一部だけが適用されている可能性があります。特定のマイグレーションファイルを直接実行することで解決できます：
  ```bash
  bunx wrangler d1 execute kirinuki-playlist --local --file=drizzle/XXXX_migration_name.sql
  ```

- **既存テーブルの確認**：現在のデータベースの状態を確認するには以下のコマンドを使用します：
  ```bash
  bunx wrangler d1 execute kirinuki-playlist --local --command="SELECT name FROM sqlite_master WHERE type='table'"
  ```

- **開発サーバーの起動エラー**：LibSQLサーバーが動作していない場合は、`bun run db:server`を実行してDockerでlibsqlサーバーを起動してください。
