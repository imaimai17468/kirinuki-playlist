---
description: Kirinuki-Playlistプロジェクトのサービス層テスト規約
globs: src/**/__tests__/**/*.ts
alwaysApply: false
---
# サービス層・リポジトリ層テスト規約

Kirinuki-Playlistプロジェクトでは、サービス層（ビジネスロジック）とリポジトリ層（APIクライアント）のテストに関して以下の規約を定めています。

## 基本方針

1. **単体テスト重視**: 各機能を個別にテストし、依存関係はモックする
2. **テスト容易性**: テスト可能なコードを書くことを重視
3. **カバレッジ**: 重要なビジネスロジックは高いカバレッジを目指す
4. **実行速度**: テストは高速に実行できるようにする
5. **メンテナンス性**: テストは保守しやすく、理解しやすいものにする

## テスト環境設定

### テストフレームワーク

テストには Bun Test（Jest互換）を使用します。package.jsonにテスト実行スクリプトを定義してください。

### ディレクトリ構造

テストファイルは各機能ディレクトリ内に配置し、テスト対象のファイル名に関連する名前を付けます。以下の構造を基本としてください：

- `src/db/services/*/`：サービス層のロジックとテスト
  - `__tests__/`：テストファイル
- `src/db/repositories/*/`：リポジトリ層のロジックとテスト
  - `__tests__/`：テストファイル
- `src/db/repositories/test/`：テスト共通セットアップ

## サービス層テスト

サービス層はビジネスロジックを担当し、データベースアクセスに依存します。テスト時はデータベースをモックします。

### モック方法の基本原則

1. 専用のモックヘルパー関数を作成し、一貫したモックを提供する
2. テスト前に各テストケース用のモックを設定する
3. 各テスト後にモックをリセットする
4. データベースクエリメソッドのチェーンをモックするための階層構造を用意する

### テストケースの基本構造

サービス層のテストでは以下の点を確認します：

1. **正常系テスト**：期待通りの結果が得られること
2. **異常系テスト**：エラーが適切に処理されること
3. **データベース呼び出し検証**：適切なデータベースメソッドが呼ばれること

## リポジトリ層テスト

リポジトリ層はAPIアクセスを担当します。テスト時はAPIクライアントをモックします。

### テスト準備

リポジトリ層のテストでは以下の準備を行います：

1. テスト環境のセットアップ（setupTestEnv関数など）
2. テスト用データの挿入
3. テスト終了後のクリーンアップ

### テストケースの基本パターン

リポジトリ層では以下のパターンをテストしてください：

1. **データ取得テスト**：
   - 存在するデータの取得
   - 存在しないデータの取得（エラー処理）
   - 一覧取得

2. **データ作成テスト**：
   - 有効なデータでの作成
   - バリデーションエラー

3. **データ更新テスト**：
   - 全項目更新
   - 部分更新
   - 存在しないデータの更新（エラー処理）

4. **データ削除テスト**：
   - 正常削除
   - 削除後の確認

5. **関連データテスト**：
   - 関連エンティティの取得と結合

## クエリパラメータ処理のテスト

特にタグ機能など、複雑なクエリパラメータを処理するAPIのテストでは、以下のケースをカバーしてください：

1. **単一値パラメータ**：
   - 単一の文字列値として渡された場合の処理
   - 単一値を配列に変換する処理の検証

2. **配列パラメータ**：
   - 複数値が配列として渡された場合の処理
   - 空配列の場合の処理

3. **パラメータ省略時**：
   - オプショナルパラメータが省略された場合のデフォルト動作

4. **型変換**：
   - 文字列から適切な型への変換処理の検証
   - 不正な値の変換時のエラーハンドリング

## タグ関連機能のテスト

タグ関連機能では、以下の特有のテストケースを実装してください：

### タグ本体のテスト

1. タグのCRUD操作テスト
2. バリデーションエラーテスト（空のタグ名など）

### タグと動画の関連テスト

1. **タグによる動画検索**：
   - 単一タグによる検索
   - 複数タグによる検索（OR条件）
   - 複数タグによる検索（AND条件）
   - 存在しないタグでの検索

2. **エラー処理**：
   - 不正なタグIDの処理
   - 入力検証エラーの処理

3. **パフォーマンス考慮事項**：
   - 大量のタグ/動画データでの動作検証

## プレイリスト・動画管理機能のテスト

プレイリスト管理機能には以下のテストを実装してください：

### プレイリスト本体のテスト

1. プレイリストのCRUD操作テスト
2. バリデーションエラーテスト

### 動画管理機能のテスト

1. **動画追加**：
   - プレイリストに動画を追加できること
   - 追加後のデータ検証

2. **動画削除**：
   - プレイリストから動画を削除できること
   - 削除後のデータ検証

3. **動画順序更新**：
   - 単一動画の順序更新
   - 最小順序値（0）の更新
   - 複数動画の順序入れ替え
   - バルク更新（複数動画を一度に更新）

4. **エラー処理**：
   - 存在しないプレイリスト/動画IDの処理
   - 無効な順序値（負の値）の処理

## ベストプラクティス

### 一般的なベストプラクティス

1. **テストの分離**: 各テストは独立して実行できるようにする
2. **テストデータの明示**: テストに必要なデータを明示的に定義する
3. **テスト用ヘルパー関数**: 共通のセットアップや検証ロジックをヘルパー関数として抽出
4. **エラーケースのテスト**: 正常系だけでなく、エラーケースも必ずテストする
5. **モックの適切な使用**: 外部依存はモックするが、ビジネスロジック自体はモックしない

### テスト項目のチェックリスト

サービス層・リポジトリ層のテストでは、以下の項目を確認します：

- [ ] 基本的なCRUD操作が正しく動作するか
- [ ] エラーケースが適切に処理されるか
- [ ] 関連エンティティが正しく取得・結合されるか
- [ ] バリデーションが正しく機能するか
- [ ] 期待通りのデータ変換が行われるか
- [ ] パフォーマンス要件を満たしているか（必要に応じて）

### データ型のテスト

1. **型安全性**: 関数の入力と出力が正しい型であることを確認
2. **バリデーション**: スキーマバリデーションが正しく機能することを確認
3. **部分的更新**: 部分的更新（Partial Update）が正しく機能することを確認
4. **型変換**: データ変換（DB型からドメイン型など）が正しく行われることを確認

### APIクライアントの使い方

1. **エラーハンドリング**: API呼び出しのエラーが適切に処理されることを確認
2. **リトライ**: 必要に応じてリトライロジックが機能することを確認
3. **キャッシュ**: キャッシュが正しく動作することを確認
4. **並行リクエスト**: 並行リクエストが正しく処理されることを確認

### テスト実行のベストプラクティス

1. **継続的インテグレーション**: CIパイプラインでテストを自動実行する
2. **高速なテスト実行**: テストは高速に実行できるようにする
3. **コードカバレッジの測定**: 重要なコードパスがテストされていることを確認
4. **テスト失敗の迅速な対応**: テストが失敗したら優先的に修正する
5. **テストコードのレビュー**: 実装コードと同様にテストコードもレビューの対象とする
