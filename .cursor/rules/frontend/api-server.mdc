---
description: Kirinuki-PlaylistプロジェクトのサーバーサイドAPI実装規約
globs: src/app/api/**/*.ts
---

# サーバーサイドAPI実装規約

## プロジェクト概要

Kirinuki-PlaylistではNext.jsアプリケーション内でHonoを使用してAPIを実装しています。
このドキュメントでは、APIコードの構造とベストプラクティスについて説明します。

## APIコードの構成

APIコードは以下のディレクトリ構造に従って整理します：

```
src/
├── app/
│   └── api/
│       └── [...route]/
│           ├── route.ts         # エントリーポイント
│           ├── videos.ts        # ビデオ関連エンドポイント
│           ├── playlists.ts     # プレイリスト関連エンドポイント
│           └── author.ts        # 著者関連エンドポイント
├── db/
│   ├── models/                  # データモデル
│   │   ├── videos.ts
│   │   ├── playlists.ts
│   │   └── authors.ts
│   └── services/                # データアクセスサービス
│       ├── videoService.ts
│       ├── playlistService.ts
│       └── authorService.ts
├── middleware/                  # ミドルウェア
│   ├── auth.ts
│   └── error-handler.ts
└── schemas/                     # スキーマ定義
    ├── video.ts
    ├── playlist.ts
    └── author.ts
```

## 責任の分離

APIコードは以下の責任に分けて実装します：

1. **ルーター**: HTTP要求の受け付けとレスポンスの返却
2. **サービスレイヤー**: ビジネスロジックの実装
3. **データアクセスレイヤー**: データベースアクセスの抽象化

## APIルーターの実装

### エントリーポイント (route.ts)

```typescript
// src/app/api/[...route]/route.ts
import { Hono } from 'hono';
import { handle } from 'hono/vercel';
import { videosRouter } from './videos';
import { playlistsRouter } from './playlists';
import { authorsRouter } from './authors';
import { errorHandler } from '@/middleware/error-handler';

// Honoインスタンスの作成
const app = new Hono<{ Bindings: Bindings }>()
  .use('*', errorHandler);

// 各リソースのルーターを登録
app.route('/videos', videosRouter);
app.route('/playlists', playlistsRouter);
app.route('/authors', authorsRouter);

// Vercelハンドラー
export const GET = handle(app);
export const POST = handle(app);
export const PUT = handle(app);
export const PATCH = handle(app);
export const DELETE = handle(app);
```

### リソース別ルーター

```typescript
// src/app/api/[...route]/videos.ts
import { Hono } from 'hono';
import { zValidator } from '@hono/zod-validator';
import { videoService } from '@/db/services/videoService';
import { videoSchema } from '@/schemas/video';
import { getRequestContext } from '@/utils/requestContext';

export const videosRouter = new Hono<{ Bindings: Bindings }>()
  // 一覧取得
  .get('/', async (c) => {
    const { DB } = getRequestContext().env;
    const videos = await videoService.getAllVideos(DB);
    return c.json({ success: true, videos });
  })

  // 詳細取得
  .get('/:id', async (c) => {
    const { DB } = getRequestContext().env;
    const id = c.req.param('id');
    const video = await videoService.getVideoById(DB, id);

    if (!video) {
      return c.json({
        success: false,
        error: { code: 'NOT_FOUND', message: `Video with ID ${id} not found` }
      }, 404);
    }

    return c.json({ success: true, video });
  })

  // 新規作成
  .post('/', zValidator('json', videoSchema.create), async (c) => {
    const { DB } = getRequestContext().env;
    const data = c.req.valid('json');
    const id = await videoService.createVideo(DB, data);
    return c.json({ success: true, id }, 201);
  })

  // 更新
  .patch('/:id', zValidator('json', videoSchema.update), async (c) => {
    const { DB } = getRequestContext().env;
    const id = c.req.param('id');
    const data = c.req.valid('json');

    const success = await videoService.updateVideo(DB, id, data);

    if (!success) {
      return c.json({
        success: false,
        error: { code: 'NOT_FOUND', message: `Video with ID ${id} not found` }
      }, 404);
    }

    return c.json({ success: true });
  })

  // 削除
  .delete('/:id', async (c) => {
    const { DB } = getRequestContext().env;
    const id = c.req.param('id');

    const success = await videoService.deleteVideo(DB, id);

    if (!success) {
      return c.json({
        success: false,
        error: { code: 'NOT_FOUND', message: `Video with ID ${id} not found` }
      }, 404);
    }

    return c.json({ success: true });
  });
```

## サービスレイヤー

サービスレイヤーはビジネスロジックを担当し、データアクセスレイヤーを使用してデータの取得や操作を行います。

```typescript
// src/db/services/videoService.ts
import { D1Database } from '@cloudflare/workers-types';
import { eq } from 'drizzle-orm';
import { getDb } from '@/db/drizzle';
import { videos } from '@/db/models/videos';
import { generateId } from '@/utils/id';

export const videoService = {
  /**
   * すべてのビデオを取得する
   */
  async getAllVideos(db: D1Database) {
    const drizzle = getDb(db);
    return drizzle.select().from(videos).all();
  },

  /**
   * IDによってビデオを取得する
   */
  async getVideoById(db: D1Database, id: string) {
    const drizzle = getDb(db);
    const results = await drizzle.select()
      .from(videos)
      .where(eq(videos.id, id))
      .limit(1)
      .all();

    return results.length > 0 ? results[0] : null;
  },

  /**
   * 新しいビデオを作成する
   */
  async createVideo(db: D1Database, data: VideoCreate) {
    const drizzle = getDb(db);
    const id = generateId();
    const now = new Date();

    await drizzle.insert(videos).values({
      id,
      title: data.title,
      description: data.description,
      url: data.url,
      authorId: data.authorId,
      createdAt: now,
      updatedAt: now
    });

    return id;
  },

  /**
   * ビデオを更新する
   */
  async updateVideo(db: D1Database, id: string, data: Partial<VideoCreate>) {
    const drizzle = getDb(db);
    const now = new Date();

    const result = await drizzle.update(videos)
      .set({
        ...data,
        updatedAt: now
      })
      .where(eq(videos.id, id))
      .run();

    return result.changes > 0;
  },

  /**
   * ビデオを削除する
   */
  async deleteVideo(db: D1Database, id: string) {
    const drizzle = getDb(db);
    const result = await drizzle.delete(videos)
      .where(eq(videos.id, id))
      .run();

    return result.changes > 0;
  }
};
```

## データモデル

データモデルはデータベースのテーブル構造とバリデーションスキーマを定義します。

```typescript
// src/db/models/videos.ts
import { integer, sqliteTable, text } from 'drizzle-orm/sqlite-core';
import { createInsertSchema, createSelectSchema } from 'drizzle-zod';
import { z } from 'zod';

// SQLiteテーブル定義
export const videos = sqliteTable(
  'videos',
  {
    id: text('id').primaryKey(),
    title: text('title').notNull(),
    description: text('description'),
    url: text('url').notNull(),
    authorId: text('author_id').notNull(),
    createdAt: integer('created_at', { mode: 'timestamp' }).notNull(),
    updatedAt: integer('updated_at', { mode: 'timestamp' }).notNull(),
  }
);

// バリデーションスキーマ
const baseSchema = createSelectSchema(videos);

export const videoSchema = {
  select: baseSchema,
  create: createInsertSchema(videos, {
    title: z.string().min(1).max(100),
    description: z.string().max(1000).optional(),
    url: z.string().url(),
    authorId: z.string()
  }).omit({ id: true, createdAt: true, updatedAt: true }),
  update: createInsertSchema(videos, {
    title: z.string().min(1).max(100).optional(),
    description: z.string().max(1000).optional(),
    url: z.string().url().optional(),
    authorId: z.string().optional()
  }).omit({ id: true, createdAt: true, updatedAt: true })
};

// 型定義
export type Video = z.infer<typeof baseSchema>;
export type VideoCreate = z.infer<typeof videoSchema.create>;
export type VideoUpdate = z.infer<typeof videoSchema.update>;
```

## 型安全性の確保

プロジェクトでは型安全性を確保するために以下のツールを使用しています：

1. **TypeScript**: 静的型チェック
2. **Drizzle ORM**: 型安全なデータベースアクセス
3. **Zod**: ランタイムでのデータバリデーション
4. **Hono**: 型安全なAPIルーター

## エラーハンドリング

エラーハンドリングはミドルウェアを使用して一元管理します。

```typescript
// src/middleware/error-handler.ts
import { MiddlewareHandler } from 'hono';
import { ZodError } from 'zod';
import { HTTPException } from 'hono/http-exception';

export const errorHandler: MiddlewareHandler = async (c, next) => {
  try {
    await next();
  } catch (error) {
    console.error('API Error:', error);

    // Honoの例外
    if (error instanceof HTTPException) {
      return c.json({
        success: false,
        error: {
          code: error.status.toString(),
          message: error.message
        }
      }, error.status);
    }

    // Zodのバリデーションエラー
    if (error instanceof ZodError) {
      return c.json({
        success: false,
        error: {
          code: 'VALIDATION_ERROR',
          message: 'Invalid input data',
          details: error.errors
        }
      }, 400);
    }

    // その他のエラー
    return c.json({
      success: false,
      error: {
        code: 'INTERNAL_SERVER_ERROR',
        message: 'An unexpected error occurred'
      }
    }, 500);
  }
};
```

## データベース操作

データベース操作はDrizzle ORMを使用して行います。

```typescript
// src/db/drizzle.ts
import { drizzle } from 'drizzle-orm/d1';
import { D1Database } from '@cloudflare/workers-types';
import * as schema from './models';

export function getDb(db: D1Database) {
  return drizzle(db, { schema });
}
```

## テスト

APIのテストは以下のアプローチで行います：

1. **単体テスト**: サービスレイヤーの各関数をモックしてテスト
2. **統合テスト**: 実際のデータベースを使用してAPIエンドポイントをテスト
3. **E2Eテスト**: フロントエンドからの実際のAPI呼び出しをテスト

詳細なテスト方法については [api-testing.mdc](./api-testing.mdc) を参照してください。

## セキュリティ

APIのセキュリティ対策として以下を実装します：

1. **認証**: JWTベースの認証システム
2. **認可**: ロールベースのアクセス制御
3. **入力バリデーション**: すべてのリクエストデータのバリデーション
4. **セキュアヘッダー**: 適切なセキュリティヘッダーの設定
5. **レート制限**: 大量のリクエストからの保護

## Honoルーター実装メソッド

Honoルーターは以下のメソッドを使用して実装できます：

### 1. メソッドチェーンによる実装

```typescript
// メソッドチェーンによる実装
export const videosRouter = new Hono<{ Bindings: Bindings }>()
  .get('/', async (c) => { /* 実装 */ })
  .get('/:id', async (c) => { /* 実装 */ })
  .post('/', validator, async (c) => { /* 実装 */ })
  .patch('/:id', validator, async (c) => { /* 実装 */ })
  .delete('/:id', async (c) => { /* 実装 */ });
```

### 2. ルートグループによる実装

```typescript
// ルートグループによる実装
export const apiRouter = new Hono<{ Bindings: Bindings }>();

// videosグループ
const videos = apiRouter.route('/videos');
videos.get('/', async (c) => { /* 実装 */ });
videos.get('/:id', async (c) => { /* 実装 */ });
videos.post('/', validator, async (c) => { /* 実装 */ });
videos.patch('/:id', validator, async (c) => { /* 実装 */ });
videos.delete('/:id', async (c) => { /* 実装 */ });

// playlistsグループ
const playlists = apiRouter.route('/playlists');
// 実装...
```

### 3. 関数での実装

```typescript
// 関数での実装
export function createVideosRouter() {
  const router = new Hono<{ Bindings: Bindings }>();

  router.get('/', async (c) => { /* 実装 */ });
  router.get('/:id', async (c) => { /* 実装 */ });
  // 他のエンドポイント...

  return router;
}

// 使用
const app = new Hono();
app.route('/videos', createVideosRouter());
```

いずれの方法を選択する場合も、プロジェクト全体で一貫性を保つことが重要です。
